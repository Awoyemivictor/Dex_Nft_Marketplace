"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMultiValueHeaders = exports.getMaxAge = exports.downloadFile = void 0;
const fs_1 = require("fs");
const http_1 = __importDefault(require("http"));
const https_1 = __importDefault(require("https"));
const stream_1 = require("stream");
const util_1 = require("util");
const streamPipeline = (0, util_1.promisify)(stream_1.pipeline);
const downloadFile = async (url, destination) => {
    console.log(`Downloading ${url} to ${destination}`);
    const httpx = url.startsWith('https') ? https_1.default : http_1.default;
    await new Promise((resolve, reject) => {
        const req = httpx.get(url, { timeout: 10000 }, (response) => {
            if (response.statusCode < 200 || response.statusCode > 299) {
                reject(new Error(`Failed to download ${url}: ${response.statusCode} ${response.statusMessage || ''}`));
                return;
            }
            const fileStream = (0, fs_1.createWriteStream)(destination);
            streamPipeline(response, fileStream)
                .then(resolve)
                .catch((error) => {
                console.log(`Error downloading ${url}`, error);
                reject(error);
            });
        });
        req.on('error', (error) => {
            console.log(`Error downloading ${url}`, error);
            reject(error);
        });
    });
};
exports.downloadFile = downloadFile;
const getMaxAge = (header) => {
    const parts = header.split(',');
    let maxAge;
    for (const part of parts) {
        const [key, value] = part.split('=');
        if ((key === null || key === void 0 ? void 0 : key.trim()) === 's-maxage') {
            maxAge = value === null || value === void 0 ? void 0 : value.trim();
        }
    }
    if (maxAge) {
        const result = Number.parseInt(maxAge);
        return Number.isNaN(result) ? 0 : result;
    }
    return 0;
};
exports.getMaxAge = getMaxAge;
const getMultiValueHeaders = (headers) => {
    const multiValueHeaders = {};
    for (const key of Object.keys(headers)) {
        const header = headers[key];
        if (Array.isArray(header)) {
            multiValueHeaders[key] = header;
        }
        else {
            multiValueHeaders[key] = [header];
        }
    }
    return multiValueHeaders;
};
exports.getMultiValueHeaders = getMultiValueHeaders;
